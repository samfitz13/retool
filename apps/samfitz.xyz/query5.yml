id: query5
type: datasource
subtype: GraphQLQuery
resourceName: 1d745bad-387b-470f-93ec-e2866b33ab97
template:
  ordered:
    - queryRefreshTime: ''
    - paginationLimit: ''
    - body: |-
        {
          viewer {
            login
            name
            repositories(first: 10, privacy:PUBLIC, orderBy: { field: UPDATED_AT, direction: DESC } ) {
              nodes {
                id
                name
                isPrivate
                description
                url
                updatedAt
                forkCount
                openGraphImageUrl
                stargazers {
                  totalCount
                }
                readme: object(expression: "master:README.md") {
                  ... on Blob {
                    text
                  }
                }
                licenseInfo {
                  id
                }
                primaryLanguage {
                  name
                }
                languages(first: 10) {
                  nodes {
                    name
                  }
                }
              }
            }
          }
        }
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - paginationPaginationField: ''
    - headers: ''
    - showFailureToaster: true
    - paginationEnabled: false
    - query: ''
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - graphQLVariables: '[]'
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - cookies: ''
    - metadata: null
    - changesetObject: ''
    - errorTransformer: >-
        //Use the variables data, metadata, and errors to reference these fields
        from your query's results

        if (Array.isArray(errors) && errors.length > 0) {
          return errors[0].message;
        } else {
          return false
        }
            
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - graphQLErrors: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - paginationDataField: ''
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: true
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data.viewer.repositories.nodes
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - type: POST
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - bodyType: raw
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-03-04T17:45:06.969Z
